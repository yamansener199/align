@using align.Models.Product;
@model List<GetProductsResponseModel>
﻿@{
    Layout = null; // This line ensures that the layout is not applied to this specific view
}



<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/css/toastr.min.css">
    <link rel="stylesheet" href="/css/main.css">
    <link rel="stylesheet" href="~/css/stok-yonetim.css">

    <title>Stok Yönetimi</title>

</head>
<body>

    <div class="top-bar">
        <div class="user-info">
            <span class="material-icons user-icon">account_circle</span>
            <span id="userInfo">Super Admin</span>
            <div id="clock" class="clock" style="margin-left: 10px;"></div>
            <button class="logout-btn" style="margin-left: 90px;" id="logoutButton">Çıkış</button>

        </div>
    </div>

    <br>
    <div class="navbar">
        <a href="/Home/Index"><span class="material-icons">home</span>Dashboard</a>
        <a href="/Home/Orders"><span class="material-icons">shopping_cart</span>Sipariş Yönetimi</a>
        <a href="/Home/Stocks"><span class="material-icons">storage</span>Stok Yönetimi</a>
        <a href="/Home/Warehouse"><span class="material-icons">warehouse</span>Depo Yönetimi</a>
        <a href="/Home/Report"><span class="material-icons">bar_chart</span>Sipariş Raporları</a>
        <a href="/Home/Settings"><span class="material-icons">manage_accounts</span>Kullanıcı Yönetimi</a>
    </div>
    <div class="container" style="padding-top: 10px; width: 80%; max-width: 1440px;">
        <h1>Stok Yönetimi</h1>
        <row>
            <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#exampleModal">
                Yeni Ürün Ekle
            </button>
            @* <button id="downloadPdfBtn">Envanter Raporu İndir</button> *@
        </row>
        <row>
            <table id="stockTable">
                <thead> 
                    <tr>
                        <th>Ürün Adı</th>
                        <th>Atanmamış Stok Sayısı</th>
                        <th>Bölge Müdürüne Atanmış Stok Sayısı</th>
                        <th>İşlemler</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var stockItem in Model)
                    {
                        <tr>
                            <td>@stockItem.ProductName</td>
                            <td>@stockItem.UnAssignedProductAmount</td>
                            <td>@stockItem.AssignedProductAmount</td>
                            <td>
                                <button type="button" class="btn btn-success" data-toggle="modal" data-target="#assignProductModal" onclick="openAssignModal('@stockItem.ProductId')">Bölge Müdürüne Ata</button>
                                <button type="button" class="btn btn-warning" data-toggle="modal" data-target="#productUpdateModal" onclick="openUpdateModal('@stockItem.ProductName', @stockItem.UnAssignedProductAmount, '@stockItem.ProductId')">Güncelle</button>
                                <button type="button" class="btn btn-danger">Sil</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
            <script>
                function openUpdateModal(productName, productQuantity) {
                    // Set the existing values in the modal fields
                    document.getElementById('updateProductName').value = productName;
                    document.getElementById('updateProductQuantity').value = productQuantity;
                    document.getElementById('updateProductId').value = productId;

                    // Open the update modal
                    $('#updateModal').modal('show');
                }
            </script>
        </row>
    </div>

    <div class="modal" id="stockModal">
        <div class="modal-content">
            <span class="close" id="closeModal">&times;</span>
            <!-- Stok formu buraya gelecek -->

        </div>
    </div>

    <!-- Bölge müdürüne ürün ata modal -->
    <div class="modal fade" id="assignProductModal" tabindex="-1" role="dialog" aria-labelledby="assignProductModallLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" id="assignProductModallLabel">Bölge Müdürüne Ürün Ata</h4>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="container mt-5">
                        <form method="post" asp-action="Assign" asp-controller="Product">
                            <input type="hidden" name="ProductId" id="hiddenProductId" />
                            <div class="form-group">
                                <label for="regionManagerSelect">Bölge Müdürü Seç</label>
                                <select class="form-control" id="regionManagerSelect" name="RegionManagerId">
                                </select>
                            </div>
                            <div class="form-group">
                                <label for="assignedProductCount">Atanacak Ürün Sayısı</label>
                                <input type="number" class="form-control" id="assignedProductCount" name="ProductAmount" placeholder="Atanacak Ürün Sayısını Giriniz">
                            </div>
                            <button type="submit" class="btn btn-primary">Kaydet</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Ürün ekle modal -->
    <div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" id="exampleModalLabel">Ürün ekle</h4>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="container mt-5">
                        <form id="addProductForm">
                            <div class="form-group">
                                <label for="productName">Ürün Adı:</label>
                                <input type="text" class="form-control" id="productName" placeholder="Ürün Adı" required>
                            </div>
                            <div class="form-group">
                                <label for="productQuantity">Ürün Adeti:</label>
                                <input type="number" class="form-control" id="productQuantity" placeholder="Ürün Adeti" required>
                            </div>
                            <div class="modal-footer">
                                <button type="submit" class="btn btn-primary" id="addProductSubmitBtn">Kaydet</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Ürün güncelle modal -->
    <div class="modal fade" id="productUpdateModal" tabindex="-1" role="dialog" aria-labelledby="productUpdateModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" id="productUpdateModalLabel">Ürün Güncelle</h4>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="container mt-5">
                        <!-- Update Form -->
                        <form id="updateForm">
                            <div class="form-group">
                                <label for="updateProductName">Ürün Adı:</label>
                                <input type="text" class="form-control" id="updateProductName" placeholder="Ürün Adı" required>
                            </div>
                            <div class="form-group">
                                <label for="updateProductQuantity">Atanmamış Stok Sayısı:</label>
                                <input type="number" class="form-control" id="updateProductQuantity" placeholder="Atanmamış Stok Sayısı" required>
                            </div>
                            <!-- Hidden field to store the ID of the item being updated -->
                            <input type="hidden" id="updateProductId">
                            <button type="submit" class="btn btn-primary">Güncelle</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/js/toastr.min.js"></script>
    <script>
        function openAssignModal(productId) {
            // Set the ProductId in the hidden form field
            document.getElementById('hiddenProductId').value = productId;
        }
    </script>   
    <script>
        // Function to fetch data from the API
        function fetchData() {
            fetch('/User/GetRegionManagers')
                .then(response => response.json())
                .then(data => {
                    // Get the select element
                    const selectElement = document.getElementById('regionManagerSelect');

                    // Clear any existing options
                    selectElement.innerHTML = '';

                    // Loop through the data and add options
                    data.data.forEach(manager => {
                        const option = document.createElement('option');
                        option.value = manager.id; // Assuming manager id is unique and suitable for value
                        option.textContent = `${manager.firstName} ${manager.lastName}`;
                        selectElement.appendChild(option);
                    });
                })
                .catch(error => console.error('Error fetching data:', error));
        }

        // Call the fetchData function when the page loads
        window.onload = fetchData;
    </script>
    <script>
        fetch('/User/GetSessionUserInfo', {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
            },
        })
            .then(response => response.json())
            .then(data => {

                const fullName = `${data.data.firstName} ${data.data.lastName}`;
                document.getElementById('userInfo').textContent = fullName;
            })
            .catch(error => console.error('Error fetching user information:', error));
    </script>

    <script>
        document.getElementById('logoutButton').addEventListener('click', function () {
            fetch('/Auth/Logout', {
                method: 'GET',
            })
                .then(response => {
                    if (response.ok) {
                        // Redirect to the login page after successful logout
                        window.location.href = '/Auth/Login';
                    } else {
                        // Handle errors if needed
                        console.error('Logout failed:', response.status);
                    }
                })
                .catch(error => {
                    // Handle network errors
                    console.error('Network error during logout:', error);
                });
        });
    </script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            document.getElementById('updateForm').addEventListener('submit', function (e) {
                e.preventDefault(); // Prevent the default form submission

                var formData = {
                    ProductId: parseInt(document.getElementById('updateProductId').value),
                    ProductName: document.getElementById('updateProductName').value,
                    UnAssignedProductAmount: parseInt(document.getElementById('updateProductQuantity').value)
                };

                makeUpdateRequest(formData);
            });
        });

        function makeUpdateRequest(formData) {
            const apiUrl = '/Home/UpdateProduct';

            const fetchOptions = {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(formData)
            };

            fetch(apiUrl, fetchOptions)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    if (data) {
                        $('#productUpdateModal').modal('hide');
                        window.location.href = '/Home/Stocks';
                    } else {
                        console.log('Product could not be updated');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                });
        }

        function openUpdateModal(productName, unassignedStock, productId) {
            document.getElementById('updateProductName').value = productName;
            document.getElementById('updateProductQuantity').value = unassignedStock;
            document.getElementById('updateProductId').value = productId;

            $('#productUpdateModal').modal('show');
        }
    </script>

    
</body>
</html>


<script>
    function updateClock() {
        var now = new Date();
        var hours = now.getHours().toString().padStart(2, '0');
        var minutes = now.getMinutes().toString().padStart(2, '0');
        var seconds = now.getSeconds().toString().padStart(2, '0');
        var dateStr = now.toLocaleDateString('tr-TR');
        var timeStr = hours + ':' + minutes + ':' + seconds;
        document.getElementById('clock').innerText = dateStr + ' ' + timeStr;
    }

    setInterval(updateClock, 1000);
</script>

<script>

    document.getElementById('addProductSubmitBtn').addEventListener('click', function (event) {
        event.preventDefault(); 

        const name = document.getElementById('productName').value;
        const quantity = document.getElementById('productQuantity').value;

        const requestBody = {
            ProductName: name, 
            Amount: quantity,
        };

        makeServerRequest(requestBody);
    });

    function makeServerRequest(requestBody) {
        const apiUrl = '/Home/AddProduct';

        const fetchOptions = {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(requestBody)
        };

        fetch(apiUrl, fetchOptions)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                if (data) {
                    console.log("Product added");

                    window.location.href = '/Home/Stocks';

                } else {
                    console.log('Product could not be added');
                }
            })
            .catch(error => {
                console.error('Error:', error);
            });
    }

</script>



